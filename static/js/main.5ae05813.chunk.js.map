{"version":3,"sources":["components/Header.tsx","components/Button.tsx","components/ErrorBar.tsx","components/Dropbox.tsx","components/ResultView.tsx","components/App.tsx","index.tsx"],"names":["Header","react_default","a","createElement","className","Button","_ref","_ref$type","type","_ref$onClick","onClick","url","inputId","_ref$baseClass","baseClass","modifier","text","icon","postIcon","disabled","title","combinedClass","concat","modifiers","split","Array","isArray","Object","toConsumableArray","length","result","map","name","trim","join","getCSSModifiers","renderIcon","iconClass","inner","href","htmlFor","ErrorBar","errors","clearErrors","_ref2","key","components_Button","Dropbox","isMounted","setError","setResult","_ref$maxFileSize","maxFileSize","haveErrors","maxFileSizeInMb","toFixed","_useState","useState","_useState2","slicedToArray","isUploading","setUploading","_useState3","_useState4","isDragOver","setDragOver","preventDefaults","e","stopPropagation","preventDefault","handleFile","files","from","currentFile","index","size","extensionError","sizeError","parseError","uploadError","emptyFile","handleError","err","fileNameSplitted","fileExtension","reader","FileReader","onloadstart","onloadend","parseResult","JSON","parse","toString","error","body","onerror","readAsText","useEffect","onSubmit","onDragEnter","onDragOver","onDragLeave","onDrop","dataTransfer","tabIndex","onChange","target","id","multiple","ResultView","content","resetResult","countResult","json","counter","keys","registerObject","countObject","forEach","current","getCountResult","readOnly","defaultValue","App","state","_this","setState","prevState","setFiles","newFile","dragHandler","_this$state","this","haveResult","components_Header","components_ErrorBar","components_ResultView","components_Dropbox","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5ae05813.chunk.js","sourcesContent":["import React, {FC} from \"react\";\n\nconst Header: FC = () => {\n  return (\n    <header className=\"app-header\">\n      <h1 className=\"app-logo\">JSON Counter 4000</h1>\n      <p className=\"app-description\">Best way to count objects in your JSON</p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, {FC} from \"react\";\n\n// from https://github.com/random1911/universal-button\n\ninterface IProps {\n  type?: \"button\" | \"link\" | \"label\";\n  onClick?: () => void;\n  url?: string;\n  inputId?: string;\n  baseClass?: string;\n  modifier?: string | string[];\n  text?: string;\n  icon?: string;\n  postIcon?: string;\n  title?: string;\n  disabled?: boolean;\n}\n\nconst Button: FC<IProps> = ({\n  type = 'button',\n  onClick = () => {},\n  url,\n  inputId,\n  baseClass = 'button',\n  modifier,\n  text,\n  icon,\n  postIcon,\n  disabled,\n  title\n}) => {\n  const getCSSModifiers = (modifier: undefined | string | string[]) => {\n    if (!modifier) return \"\";\n    let modifiers;\n    if (typeof modifier === \"string\") {\n      modifiers = modifier.split(\",\");\n    } else if (Array.isArray(modifier)) {\n      modifiers = [...modifier];\n    }\n    if (!modifiers || !modifiers.length) return \"\";\n    const result = modifiers.map(name => `${baseClass}_${name.trim()}`);\n    return ` ${result.join(\" \")}`;\n  };\n\n  const combinedClass = `${baseClass}${getCSSModifiers(modifier)}`;\n\n  const renderIcon = (name: string) => {\n    const iconClass = `${baseClass}__icon`;\n    return <span className={`${iconClass} ${iconClass}_${name}`} />;\n  };\n\n  const inner = (\n    <span className={`${baseClass}__inner`}>\n      {icon && renderIcon(icon)}\n      {text && <span className={`${baseClass}__text`}>{text}</span>}\n      {text && postIcon && renderIcon(postIcon)}\n    </span>\n  );\n\n  switch (type) {\n    case \"link\":\n      return (\n        <a title={title} className={combinedClass} href={url}>\n          {inner}\n        </a>\n      );\n    case \"label\":\n      return (\n        <label title={title} className={combinedClass} htmlFor={inputId}>\n          {inner}\n        </label>\n      );\n    default: {\n      return (\n        <button\n          title={title}\n          type={type}\n          className={combinedClass}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {inner}\n        </button>\n      );\n    }\n  }\n};\n\nexport default Button;\n","import React, { FC } from \"react\";\nimport Button from \"./Button\";\n\nexport interface IError {\n  key: string;\n  text: string;\n}\n\ninterface IProps {\n  errors: IError[];\n  clearErrors: () => void;\n}\n\nconst ErrorBar: FC<IProps> = ({ errors, clearErrors }) => {\n  const renderError = ({ key, text }: IError) => {\n    return (\n      <li key={key} className=\"error-bar__item\">\n        <strong>Error:</strong> {text}\n      </li>\n    );\n  };\n\n  return (\n    <div className=\"error-bar\">\n      <ol className=\"error-bar__content\">{errors.map(renderError)}</ol>\n      <Button\n        baseClass=\"error-bar-reset\"\n        title=\"Clear errors\"\n        onClick={clearErrors}\n      />\n    </div>\n  );\n};\n\nexport default ErrorBar;\n","import React, { FC, FormEvent, DragEvent, useState, useEffect } from \"react\";\nimport Button from \"./Button\";\nimport { IError } from \"./ErrorBar\";\nimport { IJsonFile } from \"./ResultView\";\n\ninterface IProps {\n  setError: (error: IError) => void;\n  setResult: (newFile: IJsonFile) => void;\n  clearErrors: () => void;\n  haveErrors: boolean;\n  maxFileSize?: number;\n}\ninterface IState {\n  uploading: boolean;\n  isDragOver: boolean;\n  maxFileSizeInMb: string;\n}\n\ninterface InputFile extends FormEvent {\n  target: HTMLInputElement & EventTarget;\n}\n\nconst Dropbox: FC<IProps> = ({\n  setError,\n  setResult,\n  maxFileSize = 1048576,\n  haveErrors,\n  clearErrors\n}) => {\n  const maxFileSizeInMb: string = (maxFileSize / 1024 / 1024).toFixed(0);\n  let isMounted: boolean;\n  const [isUploading, setUploading] = useState(false);\n  const [isDragOver, setDragOver] = useState(false);\n\n  const preventDefaults = (e: DragEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  };\n  const onSubmit = (e: FormEvent) => {\n    e.preventDefault();\n  };\n  const handleFile = (files: FileList | null) => {\n    if (!files) return;\n    const checkFile = (currentFile: File, index: number) => {\n      const { name, size } = currentFile;\n      const extensionError = `\"${name}\" don't have .json or .txt format.`;\n      const sizeError = `\"${name}\" is grater than ${maxFileSizeInMb}mb`;\n      const parseError = `uploaded file \"${name}\" can't be parsed as JSON`;\n      const uploadError = `can't upload \"${name}\"`;\n      const emptyFile = `file ${name} is empty`;\n\n      const handleError = (text: string) => {\n        const err = {\n          text,\n          key: `${name}_${index}`\n        };\n        setError(err);\n      };\n\n      /*\n        * First I planned to check Mime type\n        * but instead of application/json I've seen just empty string in real json\n        * Whats why I check just file extension\n        * .json and .txt passes as valid\n        * */\n\n      const fileNameSplitted = name.split(\".\");\n      const fileExtension = fileNameSplitted[fileNameSplitted.length - 1];\n\n      if (fileExtension !== \"json\" && fileExtension !== \"txt\") {\n        handleError(extensionError);\n        return;\n      }\n\n      if (size >= maxFileSize) {\n        handleError(sizeError);\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onloadstart = () => {\n        isMounted && setUploading(true);\n      };\n      reader.onloadend = () => {\n        isMounted && setUploading(false);\n        let parseResult = false;\n        // check if JSON is valid\n        try {\n          const { result } = reader;\n          if (result) {\n            parseResult = JSON.parse(result.toString());\n          } else if (result === \"\") {\n            handleError(emptyFile);\n          }\n        } catch (error) {\n          handleError(parseError);\n          return;\n        }\n        if (parseResult) {\n          const newResult = {\n            name,\n            body: parseResult\n          };\n          setResult(newResult);\n        }\n      };\n      reader.onerror = () => {\n        handleError(uploadError);\n      };\n\n      reader.readAsText(currentFile);\n    };\n    Array.from(files).map(checkFile);\n  };\n  const handleChange = (e: InputFile) => {\n    clearErrors();\n    handleFile(e.target.files);\n  };\n  const handleDragEnter = (e: DragEvent) => {\n    preventDefaults(e);\n    setDragOver(true);\n  };\n  const handleDragOver = (e: DragEvent) => {\n    preventDefaults(e);\n  };\n  const handleDragLeave = (e: DragEvent) => {\n    preventDefaults(e);\n    setDragOver(false);\n  };\n  const handleDrop = (e: DragEvent) => {\n    preventDefaults(e);\n    isMounted && setDragOver(false);\n    if (isUploading) return;\n    clearErrors();\n    const dt = e.dataTransfer;\n    const files = dt.files;\n    handleFile(files);\n  };\n\n  useEffect(() => {\n    isMounted = true;\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const getModifier = () => {\n    const base = \" drop-box_\";\n    if (isDragOver && !isUploading) {\n      return `${base}drag-over`;\n    }\n    if (haveErrors) {\n      return `${base}error`;\n    }\n    return \"\";\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n      className={`drop-box${getModifier()}`}\n    >\n      {isUploading && <div className=\"drop-box__overlay\">Loading...</div>}\n      <input\n        tabIndex={0}\n        onChange={handleChange}\n        type=\"file\"\n        id=\"file\"\n        multiple\n        className=\"drop-box__input\"\n      />\n      <Button type=\"label\" inputId=\"file\" text=\"Choose a file\" />\n      <p className=\"drop-box__description\">\n        File have to be JSON in .json/.txt format and less than{\" \"}\n        {maxFileSizeInMb}mb\n      </p>\n    </form>\n  );\n};\n\nexport default Dropbox;\n","import React, { FC } from \"react\";\nimport Button from \"./Button\";\n\nexport interface IJsonFile {\n  name: string;\n  body: any;\n}\n\ninterface IProps {\n  content: IJsonFile[];\n  resetResult: () => void;\n}\n\nconst ResultView: FC<IProps> = ({ content, resetResult }) => {\n  const getCountResult = (json: any) => {\n    let counter: number = 0;\n    let keys: string[] = [];\n    const registerObject = (key: string) => {\n      counter += 1;\n      // register keys/indexes where objects were found\n      keys = [...keys, key];\n    };\n\n    // recursive function for counting arrays and objects\n    const countObject = (target: any) => {\n      const keys = Object.keys(target);\n      keys.forEach(key => {\n        const current = target[key];\n        if (typeof current === \"object\" && current !== null) {\n          registerObject(key.toString());\n          countObject(current);\n        }\n      });\n    };\n    countObject(json);\n    return { counter, keys };\n  };\n\n  const renderResultItem = ({ name, body }: IJsonFile) => {\n    const countResult = getCountResult(body);\n    const keys = countResult.keys.join(\"\\n\");\n    return (\n      <li key={name} className=\"result-view-item\">\n        <div className=\"result-view-item__summary\">\n          <div className=\"result-view-item__summary-row\">\n            <span className=\"result-view-item__label\">File name:</span>\n            <span className=\"result-view-item__name\">{name}</span>\n          </div>\n          <div className=\"result-view-item__summary-row\">\n            <span className=\"result-view-item__label\">Objects count:</span>\n            <span className=\"result-view-item__count\">\n              {countResult.counter}\n            </span>\n          </div>\n        </div>\n        <div className=\"result-view-item__details\">\n          <span className=\"result-view-item__label\">Keys:</span>\n          <textarea\n            readOnly\n            className=\"result-view-item__keys-list\"\n            defaultValue={keys}\n          />\n        </div>\n      </li>\n    );\n  };\n\n  return (\n    <div className=\"result-view\">\n      <h2 className=\"result-view-caption\">Here is a counting result:</h2>\n      <ul className=\"result-view-list\">{content.map(renderResultItem)}</ul>\n      <div className=\"result-view-footer\">\n        <Button text=\"Count something else\" onClick={resetResult} />\n      </div>\n    </div>\n  );\n};\n\nexport default ResultView;\n","import React, { Component, DragEvent } from \"react\";\nimport Header from \"./Header\";\nimport ErrorBar, { IError } from \"./ErrorBar\";\nimport Dropbox from \"./Dropbox\";\nimport ResultView, { IJsonFile } from \"./ResultView\";\n\ninterface IState {\n  errors: IError[];\n  files: IJsonFile[];\n}\n\nclass App extends Component<{}, IState> {\n  state = {\n    errors: [],\n    files: []\n  };\n\n  // set errors for error bar\n  setError = (error: IError) => {\n    this.setState(prevState => {\n      const errors = [...prevState.errors, error];\n      return { errors };\n    });\n  };\n\n  // clear errors for error bar\n  clearErrors = () => {\n    this.setState({\n      errors: []\n    });\n  };\n\n  // set valid json files to count\n  setFiles = (newFile: IJsonFile) => {\n    this.setState(prevState => {\n      const files = [...prevState.files, newFile];\n      return { files };\n    });\n  };\n\n  // reset state function for button on result view\n  resetResult = () => {\n    this.setState({\n      errors: [],\n      files: []\n    });\n  };\n\n  // handler for drag on result view\n  dragHandler = (e: DragEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this.resetResult();\n  };\n\n  render() {\n    const { errors, files } = this.state;\n    const haveErrors: boolean = !!errors.length;\n    const haveResult: boolean = !!files.length;\n\n    return (\n      <div className=\"app-wrapper\" onDragEnter={this.dragHandler}>\n        <Header />\n        <div className=\"app-body\">\n          {haveErrors && (\n            <ErrorBar errors={errors} clearErrors={this.clearErrors} />\n          )}\n          {!haveResult ? (\n            <Dropbox\n              setError={this.setError}\n              setResult={this.setFiles}\n              haveErrors={haveErrors}\n              clearErrors={this.clearErrors}\n            />\n          ) : (\n            <ResultView content={files} resetResult={this.resetResult} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/general.less\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}